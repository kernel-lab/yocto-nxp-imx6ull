/*
*  Copyright (c) 2020, The OpenThread Authors.
*  Copyright 2023-2024 NXP
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holder nor the
*     names of its contributors may be used to endorse or promote products
*     derived from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/

/*
* Header for patch information.
* Description           : Improvement on the changes required by our SPI driver.
* Version               : v001
* Mandatory/Optional    : Mandatory
* Impact if not applied : OT host won't be able to communicate reliably with IW612 over SPI.
*/

diff --git a/include/openthread/platform/radio.h b/include/openthread/platform/radio.h
index 541c2385a..b4da54b54 100644
--- a/include/openthread/platform/radio.h
+++ b/include/openthread/platform/radio.h
@@ -65,6 +65,7 @@ extern "C" {
  * @{
  *
  */
+#define BACKWARD_COMPATIBILITY_FLAG (1U << 31)
 
 enum
 {
@@ -85,6 +86,7 @@ enum
     OT_RADIO_LQI_NONE      = 0,   ///< LQI measurement not supported
     OT_RADIO_RSSI_INVALID  = 127, ///< Invalid or unknown RSSI value
     OT_RADIO_POWER_INVALID = 127, ///< Invalid or unknown power value
+    OT_RADIO_BACKWARD_COMPATIBILITY_VERSION = BACKWARD_COMPATIBILITY_FLAG | 1U, ///< Backward Compatibility field - data send to RCP on reset
 };
 
 /**
@@ -706,6 +708,15 @@ uint32_t otPlatRadioGetBusSpeed(otInstance *aInstance);
  */
 otError otPlatRadioSetBusSpeed(otInstance *aInstance, uint32_t aSpeed);
 
+/**
+ * Set the bus speed in bits/second between the host and the radio chip.
+ *
+ * @param[in]   aInstance    A pointer to an OpenThread instance.
+ * @param[in]   flags        Backward compatibility flags uses by RCP to enable/disable dynamically fixes
+ *
+ */
+void otPlatRadioSetHostBackwardCompatibilityFlags(otInstance *aInstance, uint32_t flags);
+
 /**
  * @}
  *
diff --git a/src/lib/spinel/radio_spinel_impl.hpp b/src/lib/spinel/radio_spinel_impl.hpp
index d926c509f..31b7a0ae5 100644
--- a/src/lib/spinel/radio_spinel_impl.hpp
+++ b/src/lib/spinel/radio_spinel_impl.hpp
@@ -1634,7 +1634,6 @@ template <typename InterfaceType> spinel_tid_t RadioSpinel<InterfaceType>::GetNe
 exit:
     return tid;
 }
-
 template <typename InterfaceType> otError RadioSpinel<InterfaceType>::SendReset(uint8_t aResetType)
 {
     otError        error = OT_ERROR_NONE;
@@ -1642,8 +1641,8 @@ template <typename InterfaceType> otError RadioSpinel<InterfaceType>::SendReset(
     spinel_ssize_t packed;
 
     // Pack the header, command and key
-    packed = spinel_datatype_pack(buffer, sizeof(buffer), SPINEL_DATATYPE_COMMAND_S SPINEL_DATATYPE_UINT8_S,
-                                  SPINEL_HEADER_FLAG | SPINEL_HEADER_IID_0, SPINEL_CMD_RESET, aResetType);
+    packed = spinel_datatype_pack(buffer, sizeof(buffer), SPINEL_DATATYPE_COMMAND_S SPINEL_DATATYPE_UINT8_S SPINEL_DATATYPE_UINT32_S,
+                                  SPINEL_HEADER_FLAG | SPINEL_HEADER_IID_0, SPINEL_CMD_RESET, aResetType, OT_RADIO_BACKWARD_COMPATIBILITY_VERSION);
 
     VerifyOrExit(packed > 0 && static_cast<size_t>(packed) <= sizeof(buffer), error = OT_ERROR_NO_BUFS);
 
diff --git a/src/ncp/ncp_base.cpp b/src/ncp/ncp_base.cpp
index df3330ab8..30790c54e 100644
--- a/src/ncp/ncp_base.cpp
+++ b/src/ncp/ncp_base.cpp
@@ -38,6 +38,7 @@
 #include <openthread/diag.h>
 #include <openthread/icmp6.h>
 #include <openthread/link.h>
+
 #include <openthread/logging.h>
 #include <openthread/ncp.h>
 #include <openthread/network_time.h>
@@ -48,6 +49,7 @@
 #include "common/debug.hpp"
 #include "radio/radio.hpp"
 
+
 namespace ot {
 namespace Ncp {
 
@@ -1191,9 +1193,18 @@ otError NcpBase::CommandHandler_RESET(uint8_t aHeader)
     otError error      = OT_ERROR_NONE;
     uint8_t reset_type = SPINEL_RESET_STACK;
 
-    if (mDecoder.GetRemainingLengthInStruct() > 0)
+    if( mDecoder.GetRemainingLengthInStruct() > 0 )
     {
+        uint32_t flags = BACKWARD_COMPATIBILITY_FLAG;
+
         SuccessOrAssert(error = mDecoder.ReadUint8(reset_type));
+
+        if( mDecoder.GetRemainingLengthInStruct() >= (sizeof(uint32_t)/sizeof(uint8_t)) )
+        {
+            SuccessOrAssert(error = mDecoder.ReadUint32(flags));
+        }
+
+        otPlatRadioSetHostBackwardCompatibilityFlags(mInstance, flags);
     }
 
 #if OPENTHREAD_RADIO
diff --git a/src/posix/platform/spi_interface.cpp b/src/posix/platform/spi_interface.cpp
index a515d13ef..425e5c2cd 100644
--- a/src/posix/platform/spi_interface.cpp
+++ b/src/posix/platform/spi_interface.cpp
@@ -563,7 +563,7 @@ otError SpiInterface::PushPullSpi(void)
         if ((mSpiSlaveDataLen != 0) && (mSpiSlaveDataLen <= txFrame.GetHeaderAcceptLen()))
         {
             // WAR - Discard first transaction which as transaction greater than 32 bytes with RX data available (as RCP truncated it)
-            if( (mSpiRxDiscard == 0) && (txFrame.GetHeaderAcceptLen() > mSpiSmallPacketSize) && (txFrame.GetHeaderDataLen() == txFrame.GetHeaderAcceptLen()) )
+            if( (mSpiRxDiscard == 0) && (txFrame.GetHeaderAcceptLen() > mSpiSmallPacketSize) && (txFrame.GetHeaderDataLen() == txFrame.GetHeaderAcceptLen()) && (rxFrame.GetHeaderDataLen() > mSpiSmallPacketSize) )
             {
                 otLogWarnPlat("WAR RX Frame length (0x%02X) truncated (Header was 0x%02X )", txFrame.GetHeaderAcceptLen(), mSpiSlaveDataLen);
                 mSpiRxDiscard++;
-- 
2.25.1

